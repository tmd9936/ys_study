ㅁ 디렉토리 (폴더)
- bin : 기본적인 명령어
- boot : 부트로더 디렉토리
- dev : 시스템 디바이스(장치파일)
- etc : 각종 설정 파일
- home : 사용자의 홈 디렉ㅌㅎ리
- lib 라니브러리 (커널모듈)
- media : 외부 저장소(cdroom, usb등)
- mnt 외부저장소 또는 파일시스템 마운트 포인트
- proc : 시스템 설정들의 가상파일시스템, 프로세스 정보
- root : 루트 사용자의 홈디렉토리
- sbin : 시스템(관리자) 명령어
- tmp : 임시저장소
- usr : 일반사용자들의 공통파일
- var : 시스템 운용중에 생성되는 임시데이터 저장소( 로그 파일들 기록)

run/crond.pid
프로세스 아이디

cd /var/log
$ last -f wtmp
: 로그인 이력 확인

ㅁ 압축 파일 보기 
- zcat (파일명)

ㅁ 로그파일 볼 때
: 일반 텍스트 파일은 cat 명령으로 내용확인 가능
: 바이너리로 저장된 로그 파일은 cat 명령으로 확인 불가
-- 바이너리 로그파일 보기 예 > last -f wtmp
   (wtmp : 로그인 정보가 기록된 파일, 바이너리로 저장됨.)
: 압축파일로 저장된 로그파일은 zcat 명령으로 확인 할 수 있음.

ㅁ find 명령어 
- find . -name "*.txt" : 현재 디렉토리에서부터 하위 디렉토리에 있는 모든 txt파일을 찾는다.
- find . -name "*.txt" -type f : 파일형식을 찾겠다고 명시함
- find . -size 5M : 파일사이즈가 5M인 파일 찾기
- find . -size +5M : 파일사이즈가 5M 이상인 파일 찾기
- find . -size -5M : 파일사이즈가 5M 이하인 파일 찾기
- find . -mtime +2 -a -mtime -5 -ls : 현재디렉토리에서 최근 2일에서 5일사이에 변경된 파일 찾기
			( -a : and, +2: 2일 또는 2일 이전 파일, -5: 오늘부터 5일전까지)

ㅁ 시간의 유형 (atime, mtime, ctime)
- Access(atime) : 파일에 최근 접근 시간(과거에는 read경우 시간이 변경됨었음) (현재는 파일 수정후 접근하면 바뀜)
- Modify(mtime) : 파일 내용의 변경시간
- Change(ctime) : 파일의 수정시간 (파일의 속성 등..., mtime을 포함한다고 보면됨) 

ㅁ stat
: 파일의 시간을 주로 확인할 때 사용

ㅁ ls 명령에서 시간확인
: ls -l : 기본값 (mtime)
: ls -l -u : atime
: ls -l -c : ctime


ㅁ find 명령어 고급기능
- find / -size 10M -ls 2> /dev/null : 오류 메세지들을 /dev/null에서 처리하여 없어진다.

find / -size 10M -exec ls -l {} \; 2> /dev/null

[문제1] 전체 파일중에 *.txt 파일을 찾아서 그파일안에 "HELP"가 들어있는 내용을 가져오세요
find / -name "*.txt" -exec grep -n hello {} \; 2> /dev/null

[문제2] /usr 부터 그 하위 디렉토리에서 사이즈가 50M 이상되는 파일들을 /tmp 디렉토리에 복사하세요. 그리고 ls 명령으로 확인하세요
find /usr -size +50M -exec cp {} /tmp \; 2> /dev/null
ls -l /tmp

ㅁ 필터링 (grep)
: 주로 파이프로 연결한 grep을 이용

- 파일 목록에서 특정단어 검색
-- ls -al | grep txt

- 로그파일에서 경고만 검색
-- cat /var/log/syslog | grep -i "warn" : i는 대소문자 구분없이

- ps x
-- 현재 실행중인 프로세스
-- PID : 프로세스 아이디

[문제] 현재 실행중인 프로세스중 /bin 디렉토리에서 실행중인 프로세스를 확인하세요.
단, 실행중인 grep 제외
ps x | grep "/bin" | grep -v "grep"

ㅁ 정렬 (sort)
: 파일의 내용을 특정 순서(옵션)로 정렬

- sort -k 2
-- 두 번째 필드로 정렬

- sort -k2n
-- 문자열로 인식후 정렬

ㅁ 내용검색/편집명령어(awk)
: 패턴 검색 및 텍스트 프로세싱


[문제[ 현재 디렉토리의 리스트 목록에서 파일사이즈가 5000 이상 되는 파일 목록을 출력하세요


ls -l | awk '$5 >= 5000 {print} '  | sor -k5

- /etc/passwd 에서 userid만 출력, 구분자 지정하는 옵션 -F
= cat /etc/passwd | awk -F":" '{print $1}'

ㅁ 내용검색 / 편집명령어 2(sed)
- cat /usr/share/doc/vim/copyright | sed 's/book/books/g' > mycopy
-- s : 서치 약자
-- book : 찾을 명령어
-- books : 바꿀 명령어
-- g: 전체대상


- 편집된 부분 비교하기
-- diff /usr/share/doc/vim/copyright mycopy

ㅁ 디스크 용량 확인 하기 (du : disk usage)
: 파일 용량 출력

- 현재 디렉토리부터 사용된 용량 확인
-- du
-- du -h(KB/MB/GB 표현해줌)

- 디렉토리별 용량을 오름차순 소팅해서 출력
-- du -S | sort -n
-- du --max-depth=1 -h

ㅁ 파일 묶음/압축 : tar(tape archive)
- tar : 파일 묶음
-- c : create(생성)
-- x : 해지 (풀기)?
-- v :  verbose(디테일한 상황 보고 : 실행 중 파일 목록 출력)
-- f : 저장된 파일명 지정
-- t : list(목록)확인
-- z : zip(압축)
-- j : bzip2(압축)


ㅁ 압축 : gz, bz2, xz
- gzip : 파일 압축

- 압축풀기 : gzip -d syslog.gz
-- gzip -c syslog > syslog_bak.gz : 원본은 두고 새로운 파일로 압축
* -c : 압축한 내용을 콘솔에 뿌려줌

- 압축 알고리즘 비교
-- 압축 용량 : gzip > bzip > xz (작은게 좋은 성능)
-- 압축시간 : xz > bzip2 > gzip (작은게 좋은 성능)
-- 압축해지시간 : bzip2 > xz > gzip (작은게 좋은 성능)

ㅁ 파일 시스템
- 디바이스 유형(예 > 하드디스크, USB....)

-- 인터페이스 유형
--- IDE	: Parallel ATA 방식 (40/80pin)
--- SATA : Serial ATA방식 (7pin) --> 전송속도는 IDE에 비해 빠르다.
--- SCSI	: 주변장치의 연결을 위해 사용하던 ANSI 표준 규격

- 디바이스의 분류
-- 블록 디바이스
--- 하드 디스크, CD/DVD, USB등 블록이나 섹터 단위로 데이터를 전송하는 디바이스

-- 캐릭터 디바이스
--- 키보드, 마우스, 프린터 등의 입출력 장치로 바이트 단위로 데이터를 전송하는 디바이스

- 리눅스의 장치파일(디바이스) 관리
-- /dev
--- sr0 - cd-rom 
--- hda1 - PATA(IDE)방식 HDD1(파티션 1)
--- sda1 - SATA 방식 HDD1(파티션 1)
--- sda2 - SATA 방식 HDD1(파티션 2)
--- sdb1 - SATA 방식 HDD2(파티션 1)
--- tty  - 터미널 

- /dev/input - 입력 디바이스들
- /dev/block - 블록 디바이스틀(디스크)
- /dev/char - 캐릭터 디바이스틀(입력,입출력)


ㅁ 파일 시스템의 유형 1
- 윈도우의 FAT 파일 시스템 유형 
-- MS사가 개발한 파일시스템 유형
--- FAT 파일시스템  : File Allocation Table (FAT 12, FAT16, FAT32, exFAT)
--- NTFS 파일 시스템 : New Technology File System
--- exFAT 파일 시스템 : Extended FAT

		FAT 12,  FAT16,  FAT32,  exFAT
최대크기(이론)     32M      2GB     2TB     64ZB
실제크기(실제)     -          -         32GB   512TB
파일당 최대 크기  -          -         4GB    512TB

- 윈도우의 NTFS 파일 시스템 유형
		NTFS(64KB 클러스터), NTFS(4KB 클러스터)
최대크기(이론)     256TB		    16TB
최대크기(실제)     32TB		    2TB
파일당 최대크기   256TB		    16TB


ㅁ 파일시스템의 유형2

- 리눅스 파일시스템 유형 EXT(EXtended File System)
		EXT1,   EXT2,   EXT3,   EXT4
최대크기(이론)     2GB     32TB   32TB    1EB
최대크기(실제)     2GB     32TB   16TB    -
저널링              X         X       O       O
개발시기           1992~   1993~  2001~  2008~


ㅁ 디스크 파티션
- 파티션 종유
-- Primary Patition : OS가 부팅이 될 수 있는 파티션(액티브설
-- Extended Partition : 데이터가 저장되는 논리적 파티션(  최대 4개까지 포함가능)

ㅁ 디스크 유형 : fdisk -l

- 마운트 : sudo mkfs.ext4 /dev/sdb1

- 포멧 : sudo mkfs.ext4 /dev/sdb1

- lsblk - 간단하게 디스크 트리 보기

- df - h : 디스크 리스트 보기

- umount /data - 디스크 분리

- mount -a 재마운트




























